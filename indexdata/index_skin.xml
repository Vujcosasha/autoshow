<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.19-pr16">

<!-- ********** -->
<!-- Double Click -->
<!-- id : doubleclick -->
<!-- ********** -->
  <events name="doubleclick_events" keep="true" ondoubleclick="doubleclick_ondoubleclick"/>
  <action name="doubleclick_ondoubleclick">switchFullscreen();


  </action>
<!-- ********** -->
<!-- Context menu -->
<!-- id : contextmenu -->
<!-- ********** -->
  <contextmenu fullscreen="false" versioninfo="false" touch="true">
    <item name="normal"        onclick="setViewNormal();
" separator="true"/>
    <item name="architectural" onclick="setViewArchitectural();
"/>
    <item name="littleplanet"  onclick="setViewLittlePlanet();
"/>
    <item name="fullscreenentry" onclick="enterFullscreen();
" separator="true"/>
  </contextmenu>

  <events name="contextmenuevents" keep="true" 
    onenterfullscreen="updateContextMenu" onexitfullscreen="updateContextMenu" 
    onxmlcomplete="updateContextMenu" 
    changetourlanguage="updateContextMenu" 
    />
  <events name="contextmenuvrevents" keep="true" 
    onvravailable="updateContextMenu();" onvrunavailable="updateContextMenu();"
    devices="html5"
    />
  <action name="updateContextMenu">
    getmessage(contextmenu.item[normal].caption, contextmenunormallabel);
    getmessage(contextmenu.item[architectural].caption, contextmenuarchitecturallabel);
    set(sceneisfull360, false);
    if(scene[get(xml.scene)].full360,
      sub(viewhfov, panoview.hmax, panoview.hmin);
      if (viewhfov == 360,
        sub(viewvfov, panoview.vmax, panoview.vmin);
        if (viewvfov == 180,
          set(sceneisfull360, true);
        );
      );
    );
    if (sceneisfull360 AND (device.webgl OR device.flash),
      set(contextmenu.item[littleplanet].visible, true);
      getmessage(contextmenu.item[littleplanet].caption, contextmenulittleplanetlabel);
    ,
      set(contextmenu.item[littleplanet].visible, false);
    );
    if (device.fullscreensupport,
      if(tour_fullscreen,
        getmessage(contextmenu.item[fullscreenentry].caption, contextmenucloseFsLabel);
        set(contextmenu.item[fullscreenentry].onclick, exitFullscreen();
);
       ,
        getmessage(contextmenu.item[fullscreenentry].caption, contextmenuopenFsLabel);
        set(contextmenu.item[fullscreenentry].onclick, enterFullscreen();
);
      );
     ,
      set(contextmenu.item[fullscreenentry].visible, false);
    );
  </action>

<!-- ********* -->
<!-- Gyroscope -->
<!-- ********* -->


<plugin name="gyroscope"
        url="%FIRSTXML%/graphics/gyro2.js"
        keep="true"
        devices="no-desktop.and.html5"

        onunavailable="checkGyroUnavailable();"
        sensor_mode="1"
        friction="auto"
        autocalibration="true"
        touch_mode="full"
        onavailable="delayedcall(1, checkGyroAvailability(););"
        enabled="false"
        activated="false"
        />

<events name="gyroscopeEvents" onnewpano="planarGyroscopeTest();" keep="true" />

<action name="planarGyroscopeTest">
  if(plugin[gyroscope],
    if(scene[get(xml.scene)].full360,
      set(sceneisfull360, false);
      sub(viewhfov, panoview.hmax, panoview.hmin);
      if (viewhfov == 360,
        sub(viewvfov, panoview.vmax, panoview.vmin);
        if (viewvfov == 180,
          set(sceneisfull360, true);
        );
      );
      if (sceneisfull360,
        set(plugin[gyroscope].camroll, true);
      ,
        set(plugin[gyroscope].camroll, false);
      );
    ,
      set(plugin[gyroscope].camroll, false);
    );
  );
</action>

<action name="changeGyroscopeState">
  if(plugin[gyroscope],
    if (plugin[gyroscope].isavailable,
      if(%1,
        set(plugin[gyroscope].activated,true);
      ,
        set(plugin[gyroscope].activated,false);
      );
      if (%1 != plugin[gyroscope].enabled,
        if(plugin[gyroscope].activated,
          switch(plugin[gyroscope].enabled);
        ,
          set(plugin[gyroscope].enabled, false);
        );
        if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
      );
    );
  );
</action>

<action name="checkGyroAvailability">
  if(plugin[gyroscope],
    if (plugin[gyroscope].isavailable,
      
      set(sceneisfull360, false);
      if (scene[get(xml.scene)].full360,
        sub(viewhfov, panoview.hmax, panoview.hmin);
        if (viewhfov == 360,
          sub(viewvfov, panoview.vmax, panoview.vmin);
          if (viewvfov == 180,
            set(sceneisfull360, true);
          );
        );
      );
      set(delaythegyrocheck, false);
      if (sceneisfull360 AND tour_firstlittleplanet, set(delaythegyrocheck, true));

      ifnot(delaythegyrocheck,
        switch(plugin[gyroscope].enabled);
        set(plugin[gyroscope].activated,true);
        set(tour_gyroscopedevices, true);
        events.dispatch(ongyroscopeavailable);
      ,
        delayedcall(1, checkGyroAvailability(););
      );
    ,
      set(tour_gyroscopedevices, false);
    );
    if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
  ,
    checkGyroUnavailable();
  );
</action>

<action name="checkGyroUnavailable">
  set(plugin[gyroscope].activated, false);
  set(plugin[gyroscope].enabled, false);
  set(tour_gyroscopedevices, false);
  events.dispatch(ongyroscopeunavailable);
</action>

<!-- ********** -->
<!-- Docked Thumbnails &amp; Control Bar -->
<!-- id : controlBar_dockedThumbnails -->
<!-- ********** -->

<krpano controlBar_dockedThumbnailsbarbuilt="false" controlBar_dockedThumbnailsIsOpened="false" />

<events name="controlBar_dockedThumbnailsbarevents" 
	onxmlcomplete="controlBar_dockedThumbnailsbuildMenuBar();"


	
	keep="true"/>



<action name="controlBar_dockedThumbnailsbuildMenuBar">
	ifnot (controlBar_dockedThumbnailsbarbuilt, controlBar_dockedThumbnailsbuildMenu(); set(controlBar_dockedThumbnailsbarbuilt, true););
</action>



<action name="controlBar_dockedThumbnailsbuildMenu">
	
    set(controlBar_dockedThumbnailsbutton_pos, 0);
    set(layer[controlBar_dockedThumbnailsbtn_hidecontrols].x, get(controlBar_dockedThumbnailsbutton_pos));
    set(layer[controlBar_dockedThumbnailsbtn_hidecontrols_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
    inc(controlBar_dockedThumbnailsbutton_pos, 36);


      if (device.desktop,
        set(layer[controlBar_dockedThumbnailsbtn_display_help].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_display_help_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_close_help].x  , get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_close_help_bg].x  , get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );

      if (device.fullscreensupport,
        set(layer[controlBar_dockedThumbnailsbtn_openfs].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_closefs].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_openfs_bg ].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_closefs_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );



      set(layer[controlBar_dockedThumbnailsbtn_autorotate_on].x , get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_autorotate_on_bg].x , get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_autorotate_off].x, get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_autorotate_off_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
      inc(controlBar_dockedThumbnailsbutton_pos, 36);



      if (device.desktop,
        set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );




      if(plugin[gyroscope],
        set(controlBar_dockedThumbnailsDisplayGyroscopeButton, false);
        if (device.tablet, set(controlBar_dockedThumbnailsDisplayGyroscopeButton, true););
        if (device.mobile, set(controlBar_dockedThumbnailsDisplayGyroscopeButton, true););
        if(controlBar_dockedThumbnailsDisplayGyroscopeButton,
          set(layer[controlBar_dockedThumbnailsbtn_gyroscope_on].x, get(controlBar_dockedThumbnailsbutton_pos));
          set(layer[controlBar_dockedThumbnailsbtn_gyroscope_on_bg ].x, get(controlBar_dockedThumbnailsbutton_pos));
          set(layer[controlBar_dockedThumbnailsbtn_gyroscope_off].x, get(controlBar_dockedThumbnailsbutton_pos));
          set(layer[controlBar_dockedThumbnailsbtn_gyroscope_off_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
          set(layer[controlBar_dockedThumbnailsbtn_gyroscope_not].x, get(controlBar_dockedThumbnailsbutton_pos));
          set(layer[controlBar_dockedThumbnailsbtn_gyroscope_not_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
          inc(controlBar_dockedThumbnailsbutton_pos, 36);
        );
      );


      if (device.desktop,
        set(layer[controlBar_dockedThumbnailsbtn_right].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_right_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);

        set(layer[controlBar_dockedThumbnailsbtn_left].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_left_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );

      if (device.desktop,
        set(layer[controlBar_dockedThumbnailsbtn_down].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_down_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);

        set(layer[controlBar_dockedThumbnailsbtn_up].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_up_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );

      if (device.desktop,
        set(layer[controlBar_dockedThumbnailsbtn_out].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_out_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
        set(layer[controlBar_dockedThumbnailsbtn_in].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_in_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );




	
	
	
</action>

<events name="controlBar_dockedThumbnailsStartTourEvents" onTourStart="controlBar_dockedThumbnailsCallOnStartTour();" keep="true" />

<action name="controlBar_dockedThumbnailsCallOnStartTour">
	
	controlBar_dockedThumbnailsshowMenuControls();
</action>




    <layer name="controlBar_dockedThumbnails_bg"
           keep="true"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/footer.png"
           zorder="4"
           width="100%"
           align="bottomleft"
           x="0"
           visible="false" />

    <style name="controlBar_dockedThumbnails_btn_style_bg"
            keep="true"
            parent="controlBar_dockedThumbnails_bg"
            crop="0|0|48|48"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_bg.png"
            align="bottomright"
            height="36"
            width="36"
            alpha="0.3"
            y="12"
            zorder="0"
            />
    <style name="controlBar_dockedThumbnails_btn_style_bg_off"
            keep="true"
            parent="controlBar_dockedThumbnails_bg"
            crop="0|0|48|48"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_bg.png"
            align="bottomright"
            height="36"
            width="36"
            alpha="0.3"
            y="12"
            zorder="0"
            />

    <style name="controlBar_dockedThumbnails_btn_style_on_bg"
           keep="true"
           parent="controlBar_dockedThumbnails_bg"
           crop="0|48|48|48"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_bg.png"
           align="bottomright"
           height="36"
           width="36"
           alpha="0.3"
           y="12"
           zorder="0"
           />
    <style name="controlBar_dockedThumbnails_btn_style_on_bg_off"
           keep="true"
           parent="controlBar_dockedThumbnails_bg"
           crop="0|0|48|48"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_bg.png"
           align="bottomright"
           height="36"
           width="36"
           alpha="0.3"
           y="12"
           zorder="0"
           />

    <style name="controlBar_dockedThumbnails_btn_down_style"
           keep="true"
           parent="controlBar_dockedThumbnails_bg"
                 crop="0| 0|48|48"
           onovercrop="0|48|48|48"
           ondowncrop="0|96|48|48"
           align="bottomright"
           height="36"
           width="36"
           x="0" y="12"
           zorder="1"
           onhover="showTooltip('plugin',controlBar_dockedThumbnailsmenuTooltipStyle);"
           onover="controlBar_dockedThumbnailsctrl_btn_onoveraction"
           onout="controlBar_dockedThumbnailsctrl_btn_onoutaction"
           />

    <style name="controlBar_dockedThumbnails_btn_style"
           keep="true"
           parent="controlBar_dockedThumbnails_bg"
                 crop="0| 0|48|48"
           onovercrop="0|48|48|48"
           ondowncrop="0|96|48|48"
           align="bottomright"
           height="36"
           width="36"
           x="0" y="12"
           zorder="1"
           onhover="showTooltip('plugin',controlBar_dockedThumbnailsmenuTooltipStyle);"
           onover="controlBar_dockedThumbnailsctrl_btn_onoveraction"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction"
           onout="controlBar_dockedThumbnailsctrl_btn_onoutaction"
           />
    <style name="controlBar_dockedThumbnails_btn_style_off"
           keep="true"
           parent="controlBar_dockedThumbnails_bg"
           align="bottomright"
           height="36"
           width="36"
           x="0" y="12"
           zorder="1"
           onhover="showTooltip('plugin',controlBar_dockedThumbnailsmenuTooltipStyle);"
           onout="hideTooltip();"
           />

  <action name="controlBar_dockedThumbnailsctrl_btn_onoveraction">
    txtadd(btn_bg_name, get(name), "_bg");
    set(layer[get(btn_bg_name)].crop, "0|48|48|48");
  </action>

  <action name="controlBar_dockedThumbnailsctrl_btn_ondownaction">
    txtadd(btn_bg_name, get(name), "_bg");
    set(layer[get(btn_bg_name)].crop, "0|96|48|48");
  </action>

  <action name="controlBar_dockedThumbnailsctrl_btn_onoutaction">
    txtadd(btn_bg_name, get(name), "_bg");
    set(layer[get(btn_bg_name)].crop, "0|0|48|48");
    hideTooltip();
  </action>

    <style name="controlBar_dockedThumbnails_btn_style_on"
            keep="true"
            parent="controlBar_dockedThumbnails_bg"
                  crop="0|48|48|48"
            onovercrop="0|48|48|48"
            ondowncrop="0|96|48|48"
            align="bottomright"
            height="36"
            width="36"
            y="12"
            zorder="1"
            onhover="showTooltip('plugin',controlBar_dockedThumbnailsmenuTooltipStyle);" 
            onout="hideTooltip();"
            />
    <style name="controlBar_dockedThumbnails_btn_style_on_off"
            keep="true"
            parent="controlBar_dockedThumbnails_bg"
            align="bottomright"
            height="36"
            width="36"
            y="12"
            zorder="1"
            onhover="showTooltip('plugin',controlBar_dockedThumbnailsmenuTooltipStyle);" 
            onout="hideTooltip();"
            />


  <events name="controlBar_dockedThumbnailsgyroscopeavailableevent"
          ongyroscopeavailable="controlBar_dockedThumbnailsupdateGyroscopeButtonsAvailability();"
          ongyroscopeunavailable="controlBar_dockedThumbnailsupdateGyroscopeButtonsAvailability();"
          ongyroscopeon="controlBar_dockedThumbnailsenableGyroscopeButtons(true);"
          ongyroscopeoff="controlBar_dockedThumbnailsenableGyroscopeButtons(false);"
          keep="true" devices="html5" />
  <krpano controlBar_dockedThumbnailsmenugyroscopeavailable="false" controlBar_dockedThumbnailsmenugyroscopeenabled="false"/>
  <action name="controlBar_dockedThumbnailsupdateGyroscopeButtonsAvailability">
    if (tour_gyroscopedevices,
      set(controlBar_dockedThumbnailsmenugyroscopeavailable, true);
      controlBar_dockedThumbnailsupdateGyroscopeButtons();
    ,
      set(controlBar_dockedThumbnailsmenugyroscopeavailable, false);
      controlBar_dockedThumbnailsupdateGyroscopeButtons();
    );
  </action>
  <action name="controlBar_dockedThumbnailsenableGyroscopeButtons">
    if (tour_gyroscopedevices,
      set(controlBar_dockedThumbnailsmenugyroscopeenabled, %1);
      controlBar_dockedThumbnailsupdateGyroscopeButtons();
    );
  </action>
	<action name="controlBar_dockedThumbnailsHideGyroscopeButtons">
		set(layer[controlBar_dockedThumbnailsbtn_gyroscope_off].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_gyroscope_on].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_gyroscope_off_bg].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_gyroscope_on_bg].visible, false);
		if('%1' == 'true' AND plugin[gyroscope],
			set(layer[controlBar_dockedThumbnailsbtn_gyroscope_not].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_gyroscope_not_bg].visible, true);
		,
			set(layer[controlBar_dockedThumbnailsbtn_gyroscope_not].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_gyroscope_not_bg].visible, false);
		);
	</action>
	<action name="controlBar_dockedThumbnailsShowGyroscopeButtons">
		if (controlBar_dockedThumbnailsmenugyroscopeavailable,
			if (controlBar_dockedThumbnailsmenugyroscopeenabled,
				set(layer[controlBar_dockedThumbnailsbtn_gyroscope_off].visible, true);
				set(layer[controlBar_dockedThumbnailsbtn_gyroscope_on].visible, false);
				set(layer[controlBar_dockedThumbnailsbtn_gyroscope_off_bg].visible, true);
				set(layer[controlBar_dockedThumbnailsbtn_gyroscope_on_bg].visible, false);
			,
				set(layer[controlBar_dockedThumbnailsbtn_gyroscope_off].visible, false);
				set(layer[controlBar_dockedThumbnailsbtn_gyroscope_on].visible, true);
				set(layer[controlBar_dockedThumbnailsbtn_gyroscope_off_bg].visible, false);
				set(layer[controlBar_dockedThumbnailsbtn_gyroscope_on_bg].visible, true);
			);
			set(layer[controlBar_dockedThumbnailsbtn_gyroscope_not].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_gyroscope_not_bg].visible, false);
		,
			controlBar_dockedThumbnailsHideGyroscopeButtons(true);
		);
	</action>
	<action name="controlBar_dockedThumbnailsupdateGyroscopeButtons">
		if (tour_gyroscopedevices,
			if (controlBar_dockedThumbnailsIsOpened,
				controlBar_dockedThumbnailsShowGyroscopeButtons();
			,
				controlBar_dockedThumbnailsHideGyroscopeButtons();
			);
		,
			if (controlBar_dockedThumbnailsIsOpened,
				controlBar_dockedThumbnailsHideGyroscopeButtons(true);
			,
				controlBar_dockedThumbnailsHideGyroscopeButtons();
			);
		);
	</action>
	
    <layer name="controlBar_dockedThumbnailsbtn_gyroscope_off_bg" style="controlBar_dockedThumbnails_btn_style_on_bg" visible="false" devices="html5" />
    <layer name="controlBar_dockedThumbnailsbtn_gyroscope_off"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_gyroscope.png"
            style="controlBar_dockedThumbnails_btn_style_on"
            onclick="disableGyroscope();
"
            devices="html5"
            tooltip="controlBar_dockedThumbnailsgyroOffTip"
            visible="false"
            />
    <layer name="controlBar_dockedThumbnailsbtn_gyroscope_on_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" devices="html5" />
    <layer name="controlBar_dockedThumbnailsbtn_gyroscope_on"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_gyroscope.png"
            style="controlBar_dockedThumbnails_btn_style"
            onclick="enableGyroscope();
"
            devices="html5"
            tooltip="controlBar_dockedThumbnailsgyroOnTip"
            visible="false"
            />
    <layer name="controlBar_dockedThumbnailsbtn_gyroscope_not_bg" style="controlBar_dockedThumbnails_btn_style_bg_off" visible="false" devices="html5" />
    <layer name="controlBar_dockedThumbnailsbtn_gyroscope_not"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_gyroscope_off.png"
            style="controlBar_dockedThumbnails_btn_style_off"
            enabled="true"
            capture="false"
            devices="html5"
            tooltip="controlBar_dockedThumbnailsgyroNotTip"
            visible="false"
            />


	<events name="controlBar_dockedThumbnailscontrolmodechangedevent" oncontrolmodechanged="controlBar_dockedThumbnailsupdateControlModeButtons();" keep="true"/>
	<action name="controlBar_dockedThumbnailsHideControlModeButtons">
		set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to_bg].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to_bg].visible, false);
	</action>
	<action name="controlBar_dockedThumbnailsShowControlModeButtons">
		if (tour_controlmodemousetype == "moveto",
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to_bg].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to_bg].visible, false);
		,
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to_bg].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to_bg].visible, false);
		);
	</action>
	<action name="controlBar_dockedThumbnailsupdateControlModeButtons">
	if (device.desktop,
		if (controlBar_dockedThumbnailsIsOpened,
			controlBar_dockedThumbnailsShowControlModeButtons();
		,
			controlBar_dockedThumbnailsHideControlModeButtons();
		);
	,
		controlBar_dockedThumbnailsHideControlModeButtons();
	);
	</action>
	
    <layer name="controlBar_dockedThumbnailsbtn_ctrlmode_move_to_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" devices="desktop" />
    <layer name="controlBar_dockedThumbnailsbtn_ctrlmode_move_to"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_to.png"
           style="controlBar_dockedThumbnails_btn_style"
           tooltip="controlBar_dockedThumbnailsctrlmodeMoveTip"
           onclick="setControlModeMoveTo();
"
           visible="false"
           devices="desktop"
           />
    <layer name="controlBar_dockedThumbnailsbtn_ctrlmode_drag_to_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" devices="desktop" />
    <layer name="controlBar_dockedThumbnailsbtn_ctrlmode_drag_to"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_drag_to.png"
           style="controlBar_dockedThumbnails_btn_style"
           tooltip="controlBar_dockedThumbnailsctrlmodeDragTip"
           onclick="setControlModeDragTo();
"
           visible="false"
           devices="desktop"
           />

    <layer name="controlBar_dockedThumbnailsbtn_in_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" devices="desktop"/>
    <layer name="controlBar_dockedThumbnailsbtn_in"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_zoom_in.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction();viewControlZoomIn(false);"
           onup="viewControlZoomStop();
"
           tooltip="controlBar_dockedThumbnailszoomInTip"
           devices="desktop"
           visible="false"
           />
    <layer name="controlBar_dockedThumbnailsbtn_out_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" devices="desktop"/>
    <layer name="controlBar_dockedThumbnailsbtn_out"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_zoom_out.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction();viewControlZoomOut(false);
"
           onup="viewControlZoomStop();
"
           tooltip="controlBar_dockedThumbnailszoomOutTip"
           devices="desktop"
           visible="false"
           />

    <layer name="controlBar_dockedThumbnailsbtn_left_bg" style="controlBar_dockedThumbnails_btn_style_bg" devices="desktop" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_left"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_left.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction();viewControlMoveLeft(false);
"
           onup="viewControlMoveHoriStop();
"
            tooltip="controlBar_dockedThumbnailsmoveLeftTip"
           devices="desktop"
           visible="false"
           />
    <layer name="controlBar_dockedThumbnailsbtn_right_bg" style="controlBar_dockedThumbnails_btn_style_bg" devices="desktop" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_right"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_right.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction();viewControlMoveRight(false);
"
           onup="viewControlMoveHoriStop();
"
            tooltip="controlBar_dockedThumbnailsmoveRightTip"
           devices="desktop"
           visible="false"
           />

    <layer name="controlBar_dockedThumbnailsbtn_up_bg" style="controlBar_dockedThumbnails_btn_style_bg" devices="desktop" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_up"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_up.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction();viewControlMoveUp(false);
"
           onup="viewControlMoveVertStop();
"
            tooltip="controlBar_dockedThumbnailsmoveUpTip"
           devices="desktop"
           visible="false"
           />
    <layer name="controlBar_dockedThumbnailsbtn_down_bg" style="controlBar_dockedThumbnails_btn_style_bg" devices="desktop" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_down"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_down.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction();viewControlMoveDown(false);
"
           onup="viewControlMoveVertStop();
"
            tooltip="controlBar_dockedThumbnailsmoveDownTip"
           devices="desktop"
           visible="false"
           />









    <layer name="controlBar_dockedThumbnailsbtn_openfs_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" devices="fullscreensupport" />
    <layer name="controlBar_dockedThumbnailsbtn_openfs"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_enter_fs.png"
           onclick="enterFullscreen();
"
           style="controlBar_dockedThumbnails_btn_style"
           visible="false"
           tooltip="controlBar_dockedThumbnailsopenFsTip"
           devices="fullscreensupport"
           />
    <layer name="controlBar_dockedThumbnailsbtn_closefs_bg" style="controlBar_dockedThumbnails_btn_style_on_bg" visible="false" devices="fullscreensupport" />
    <layer name="controlBar_dockedThumbnailsbtn_closefs"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_close_fs.png"
           onclick="exitFullscreen();
"
           style="controlBar_dockedThumbnails_btn_style_on"
           visible="false"
           tooltip="controlBar_dockedThumbnailscloseFsTip"
           devices="fullscreensupport"
           />

    <layer name="controlBar_dockedThumbnailsbtn_autorotate_on_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_autorotate_on"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_start_autorotation.png"
           onclick="resumeautorotation();
"
           style="controlBar_dockedThumbnails_btn_style"
           visible="false"
            tooltip="controlBar_dockedThumbnailsautorotateOnTip"
           />
    <layer name="controlBar_dockedThumbnailsbtn_autorotate_off_bg" style="controlBar_dockedThumbnails_btn_style_on_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_autorotate_off"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_stop_autorotation.png"
           onclick="pauseautorotation();
"
           style="controlBar_dockedThumbnails_btn_style_on"
           visible="false"
           tooltip="controlBar_dockedThumbnailsautorotateOffTip"
           />



    <layer name="controlBar_dockedThumbnailsbtn_display_help_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" devices="desktop" />
    <layer name="controlBar_dockedThumbnailsbtn_display_help"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_help.png"
           onclick="controlBar_dockedThumbnailsdisplayHelp();"
           style="controlBar_dockedThumbnails_btn_style"
           tooltip="controlBar_dockedThumbnailsdisplayHelpTip"
           devices="desktop"
           visible="false"
           />
    <layer name="controlBar_dockedThumbnailsbtn_close_help_bg" style="controlBar_dockedThumbnails_btn_style_on_bg" visible="false" devices="desktop"/>
    <layer name="controlBar_dockedThumbnailsbtn_close_help"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_help.png"
           onclick="controlBar_dockedThumbnailscloseHelp();"
           style="controlBar_dockedThumbnails_btn_style_on"
           visible="false"
           tooltip="controlBar_dockedThumbnailshideHelpTip"
           devices="desktop"
           />



    <layer name="controlBar_dockedThumbnailsbtn_hidecontrols_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_hidecontrols"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_hide_controls.png"
           style="controlBar_dockedThumbnails_btn_style"
           onclick="controlBar_dockedThumbnailshideMenuControls();hideTourControls();
"
           visible="false"
            tooltip="controlBar_dockedThumbnailshideControlsTip"
           />

    <layer name="controlBar_dockedThumbnailsbtn_showcontrols"
                  crop="0| 0|48|48"
            onovercrop="0|48|48|48"
            ondowncrop="0|96|48|48"
            keep="true"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_show_controls_bg.png"
            align="bottomright"
            zorder="4"
            height="36"
            width="36"
            visible="false"
            y="12"
            x="0" >
    <layer name="controlBar_dockedThumbnailsbtn_showcontrols_fg"
                  crop="0| 0|48|48"
            onovercrop="0|48|48|48"
            ondowncrop="0|96|48|48"
            onclick="controlBar_dockedThumbnailsshowMenuControls();showTourControls();
"
            onhover="showTooltip('plugin',controlBar_dockedThumbnailsmenuTooltipStyle);"
            onout="hideTooltip();"
            tooltip="controlBar_dockedThumbnailsdisplayControlsTip"
            keep="true"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_show_controls.png"
            align="center"
            height="36"
            width="36"
            />
    </layer>


<action name="controlBar_dockedThumbnailshideMenuControls">
	set(controlBar_dockedThumbnailsIsOpened, false);
	set(layer[controlBar_dockedThumbnails_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_showcontrols].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_hidecontrols_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_hidecontrols].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_in_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_out_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_in].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_out].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_right_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_left_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_right].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_left].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_down_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_up_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_down].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_up].visible, false);
		controlBar_dockedThumbnailsupdateAutorotationButtons();

		controlBar_dockedThumbnailsupdateGyroscopeButtons();

		controlBar_dockedThumbnailsupdateControlModeButtons();
		controlBar_dockedThumbnailsupdateFullscreenButtons();
		controlBar_dockedThumbnailsupdateHelpButtons();
</action>
<action name="controlBar_dockedThumbnailsshowMenuControls">
	set(controlBar_dockedThumbnailsIsOpened, true);
      controlBar_dockedThumbnailsupdateFullscreenButtons();
      controlBar_dockedThumbnailsupdateAutorotationButtons();

      controlBar_dockedThumbnailsupdateGyroscopeButtons();

      controlBar_dockedThumbnailsupdateControlModeButtons();
      controlBar_dockedThumbnailsupdateHelpButtons();
      set(layer[controlBar_dockedThumbnails_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_showcontrols].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_hidecontrols_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_hidecontrols].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_in_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_out_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_in].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_out].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_right_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_left_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_right].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_left].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_down_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_up_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_down].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_up].visible, true);
	
	
</action>


    <layer name="controlBar_dockedThumbnailshelpScreenBg" align="center" keep="true" onclick="controlBar_dockedThumbnailscloseHelp();"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/help_screen_bg.png"
           visible="false"
           zorder="97"
           >
      <layer name="controlBar_dockedThumbnailshelpScreen" align="center" keep="true" onclick="controlBar_dockedThumbnailscloseHelp();" 
             url="%FIRSTXML%/graphics/dockedthumbscontrolbar/help_screen_fg.png"
             height="100%" 
             width="prop" 
             displayed="false"
             />
    </layer>
    <action name="controlBar_dockedThumbnailsdisplayHelp">
      if (device.desktop,
        set(layer[controlBar_dockedThumbnailshelpScreen].displayed, true);
        set(layer[controlBar_dockedThumbnailshelpScreenBg].visible,true);
        controlBar_dockedThumbnailsupdateHelpButtons();
      );
    </action>
    <action name="controlBar_dockedThumbnailscloseHelp">
      if (device.desktop,
        set(layer[controlBar_dockedThumbnailshelpScreen].displayed, false);
        set(layer[controlBar_dockedThumbnailshelpScreenBg].visible,false);
        controlBar_dockedThumbnailsupdateHelpButtons();
      );
    </action>
	<action name="controlBar_dockedThumbnailsHideHelpButtons">
		set(layer[controlBar_dockedThumbnailsbtn_display_help].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_close_help].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_display_help_bg].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_close_help_bg].visible, false);
	</action>
	<action name="controlBar_dockedThumbnailsShowHelpButtons">
		if (layer[controlBar_dockedThumbnailshelpScreen].displayed,
			set(layer[controlBar_dockedThumbnailsbtn_close_help].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_display_help].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_close_help_bg].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_display_help_bg].visible, false);
		,
			set(layer[controlBar_dockedThumbnailsbtn_display_help].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_close_help].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_display_help_bg].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_close_help_bg].visible, false);
		);
	</action>
	<action name="controlBar_dockedThumbnailsupdateHelpButtons">
	if (device.desktop,
		if (controlBar_dockedThumbnailsIsOpened,
			controlBar_dockedThumbnailsShowHelpButtons();
		,
			controlBar_dockedThumbnailsHideHelpButtons();
		);
	,
		controlBar_dockedThumbnailsHideHelpButtons();
	);
	</action>
    


	<events name="controlBar_dockedThumbnailsmenufullscreenchangeevent"
		onenterfullscreen="controlBar_dockedThumbnailsupdateFullscreenButtons();"
		onexitfullscreen="controlBar_dockedThumbnailsupdateFullscreenButtons();"
		keep="true"/>
	<action name="controlBar_dockedThumbnailsHideFullscreenButtons">
		set(layer[controlBar_dockedThumbnailsbtn_openfs].visible , false);
		set(layer[controlBar_dockedThumbnailsbtn_closefs].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_openfs_bg].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_closefs_bg].visible, false);
	</action>
	<action name="controlBar_dockedThumbnailsShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[controlBar_dockedThumbnailsbtn_openfs].visible , false);
				set(layer[controlBar_dockedThumbnailsbtn_closefs].visible, true);
				set(layer[controlBar_dockedThumbnailsbtn_openfs_bg].visible, false);
				set(layer[controlBar_dockedThumbnailsbtn_closefs_bg].visible, true);
			,
				set(layer[controlBar_dockedThumbnailsbtn_openfs].visible ,true);
				set(layer[controlBar_dockedThumbnailsbtn_closefs].visible,false);
				set(layer[controlBar_dockedThumbnailsbtn_openfs_bg].visible, true);
				set(layer[controlBar_dockedThumbnailsbtn_closefs_bg].visible, false);
			);
		,
			controlBar_dockedThumbnailsHideFullscreenButtons();
		);
	</action>
	<action name="controlBar_dockedThumbnailsupdateFullscreenButtons">
		if (controlBar_dockedThumbnailsIsOpened,
			controlBar_dockedThumbnailsShowFullscreenButtons();
		,
			controlBar_dockedThumbnailsHideFullscreenButtons();
		);
	</action>

	<events name="controlBar_dockedThumbnailsAutorotationEvents"
		onstartautorotation="controlBar_dockedThumbnailsupdateAutorotationButtons();"
		onresumeautorotation="controlBar_dockedThumbnailsupdateAutorotationButtons();"
		onstopautorotation="controlBar_dockedThumbnailsupdateAutorotationButtons();"
		onpauseautorotation="controlBar_dockedThumbnailsupdateAutorotationButtons();"
		keep="true"/>
	<action name="controlBar_dockedThumbnailsHideAutorotationButtons">
		set(layer[controlBar_dockedThumbnailsbtn_autorotate_off].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_autorotate_on].visible , false);
		set(layer[controlBar_dockedThumbnailsbtn_autorotate_off_bg].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_autorotate_on_bg].visible , false);
	</action>
	<action name="controlBar_dockedThumbnailsShowAutorotationButtons">
		if(autorotate.enabled == false,
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_off].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_on].visible , true);
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_off_bg].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_on_bg].visible , true);
		,
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_off].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_on].visible , false);
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_off_bg].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_on_bg].visible , false);
		);
	</action>
	<action name="controlBar_dockedThumbnailsupdateAutorotationButtons">
		if (controlBar_dockedThumbnailsIsOpened,
			controlBar_dockedThumbnailsShowAutorotationButtons();
		,
			controlBar_dockedThumbnailsHideAutorotationButtons();
		);
	</action>



	<layer name="controlBar_dockedThumbnailsmenuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	type="text"
	align="center"
	bg="true"
	bgcolor="0x6a6a6a"
	bgalpha="0.80000000000000004"
	bgborder="0"
	css="color:#f29320;font-family:Times New Roman;font-weight:bold;font-size:14px;text-align:left;"
	edge="bottom"
	interactivecontent="false"
	zorder="0"
	padding="2"
	xoffset="0"
	yoffset="0"
	visible="false"
	html=""
	/>



<!-- ********** -->
<!-- Header -->
<!-- id : header -->
<!-- ********** -->

  <layer name="header"
         keep="true"
         type="container"
         bgcolor="0x0d0d0d"
         bgalpha="0.80000000000000004"
         align="top"
         x="0"
         y="0"
         zorder="6"
         enabled="false"
         capture="true"
         visible="false"
         height="150"
         width="100%"
         accuracy="1"
         />

  <events name="headerevents"
    onTourStart="showheader();"
    hidetourcontrols="hideheader();"
    showtourcontrols="showheader();"
    keep="true" />

  <action name="hideheader">
    set(layer[header].visible, false);
  </action>
  <action name="showheader">
    set(layer[header].visible, true);
  </action>

<!-- ********** -->
<!-- Project title -->
<!-- id : title -->
<!-- ********** -->

  <events name="title_events" 
    onTourStart="showtitle();"
    hidetourcontrols="hidetitle();" 
    showtourcontrols="showtitle();" 
    changetourlanguage="changeLanguagetitle"
    keep="true" />

  <action name="hidetitle">set(layer[title].visible, false);</action>
  <action name="showtitle">set(layer[title].visible, true );</action>

  <action name="changeLanguagetitle">
    getmessage(layer[title].html,get(projecttitleid));
    escape(layer[title].html);
  </action>

  <layer name="title" keep="true" zorder="7"
         type="text"
         align="topleft" x="10" y="10"
         onloaded="getmessage(html,get(projecttitleid));escape(html);"
         bg="false"
         bgborder="0"
         alpha="1"
         visible="false"
         capture="false" handcursor="false" enabled="false"
         interactivecontent="false" 
         txtshadow="1.0 1.0 4.0 0x000000 1.0"
         css="text-align:left;
              color:#ffffff;
              font-family:Bookman Old Style;
              font-size:16px;"/>

<!-- ********** -->
<!-- Panorama Title -->
<!-- id : title1 -->
<!-- ********** -->

  <events name="title1_events" 
    onTourStart="showtitle1();"
    hidetourcontrols="hidetitle1();" 
    showtourcontrols="showtitle1();" 
    onnewpano="updatetitle1();"
    changetourlanguage="changeLanguagetitle1"
    keep="true" />

  <action name="hidetitle1">set(layer[title1].visible, false);</action>
  <action name="showtitle1">set(layer[title1].visible, true );</action>

  <action name="changeLanguagetitle1">
    updatetitle1();
  </action>

  <action name="updatetitle1">
    getmessage(layer[title1].html, get(scene[get(xml.scene)].titleid));
    escape(layer[title1].html);
  </action>
  <layer name="title1" keep="true" zorder="8"
         type="text"
         align="top" x="0" y="10"
         bg="false"
         bgborder="0"
         alpha="1"
         visible="false"
         capture="false" handcursor="false" enabled="false"
         interactivecontent="false" 
         txtshadow="1.0 1.0 4.0 0x000000 1.0"
         css="text-align:center;
              color:#ffffff;
              font-family:Arial;
              font-weight:bold;
              font-size:20px;"/>

<action name="viewControlZoomIn">
	if(%1,
		if(%2,
			if(%2 LT view.fovmin,
				zoomto(get(view.fovmin));
			,
				if(%2 LT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, -1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, -1);
	);
</action>
<action name="viewControlZoomOut">
	if(%1,
		if(%2,
			if(%2 GT view.fovmax,
				zoomto(get(view.fovmax));
			,
				if(%2 GT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, +1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, +1);
	);
</action>
<action name="viewControlZoomStop">
	set(fov_moveforce, 0);
</action>

<action name="viewControlMoveUp">
	if(%1,
		if(%2,
			set(isfullvertical, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewvfov, panoview.vmax, panoview.vmin);
				if (viewvfov == 180,
					set(isfullvertical, true);
				);
			);
			if(isfullvertical == false AND calc(view.vlookat-%2) LT view.vlookatmin,
				moveto(get(view.hlookat), get(view.vlookatmin));
			,
				moveto(get(view.hlookat), calc(view.vlookat-%2));
			);
		,
			set(vlookat_moveforce, -1);
			delayedcall(0.1, viewControlMoveVertStop());
		);
	,
		set(vlookat_moveforce, -1);
	);
</action>
<action name="viewControlMoveDown">
	if(%1,
		if(%2,
			set(isfullvertical, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewvfov, panoview.vmax, panoview.vmin);
				if (viewvfov == 180,
					set(isfullvertical, true);
				);
			);
			if(sceneisfull360 == false AND calc(view.vlookat+%2) GT view.vlookatmax,
				moveto(get(view.hlookat), get(view.vlookatmax));
			,
				moveto(get(view.hlookat), calc(view.vlookat+%2));
			);
		,
			set(vlookat_moveforce, +1);
			delayedcall(0.1, viewControlMoveVertStop());
		);
	,
		set(vlookat_moveforce, +1);
	);
</action>
<action name="viewControlMoveLeft">
	if(%1,
		if(%2,
			set(isfullhorizontal, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewhfov, panoview.hmax, panoview.hmin);
				if (viewhfov == 360,
					set(isfullhorizontal, true);
				);
			);
			if(isfullhorizontal == false AND calc(view.hlookat-%2) LT view.hlookatmin,
				moveto(get(view.hlookatmin), get(view.vlookat));
			,
				moveto(calc(view.hlookat-%2), get(view.vlookat));
			);
		,
			set(hlookat_moveforce, -1);
			delayedcall(0.1, viewControlMoveHoriStop());
		);
	,
		set(hlookat_moveforce, -1);
	);
</action>
<action name="viewControlMoveRight">
	if(%1,
		if(%2,
			set(isfullhorizontal, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewhfov, panoview.hmax, panoview.hmin);
				if (viewhfov == 360,
					set(isfullhorizontal, true);
				);
			);
			if(isfullhorizontal == false AND calc(view.hlookat+%2) GT view.hlookatmax,
				moveto(get(view.hlookatmax), get(view.vlookat));
			,
				moveto(calc(view.hlookat+%2), get(view.vlookat));
			);
		,
			set(hlookat_moveforce, +1);
			delayedcall(0.1, viewControlMoveHoriStop());
			
		);
	,
		set(hlookat_moveforce, +1);
	);
</action>
<action name="viewControlMoveHoriStop">
	set(hlookat_moveforce, 0);
</action>
<action name="viewControlMoveVertStop">
	set(vlookat_moveforce, 0);
</action>

<action name="setViewNormal">
	stopSetViewTweens();
	if(current_view_isflat === true,
		setViewNonFlat(VFOV);
	);
	setViewNormalComplete();
</action>

<action name="setViewNormalComplete">
	set(view.fisheyefovlink, 0.5);
	set(view.fovmax, get(panoview.fovmax));
	tween(view.architectural, 0.0, distance(1.0, 0.45));
	tween(view.pannini, 0.0, distance(1.0, 0.45), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	tween(view.vlookat, get(panoview.v), distance(90, 0.45));
	tween(view.fov, get(panoview.fov), distance(50, 0.45));
	tween(view.fisheye, 0.0, distance(1.0, 0.45),
		set(view.stereographic,false);
	);
</action>

<krpano normalViewActivated="true" />
<action name="stopSetViewTweens">
	stoptween(view.fov);
	stoptween(view.vlookat);
	stoptween(view.fisheye);
	stoptween(view.architectural);
	stoptween(view.pannini);
</action>

<action name="setViewArchitectural">
	if(normalViewActivated,stopSetViewTweens(););
	if(current_view_isflat === true,
		setViewNonFlat(VFOV);
	);
	setViewArchitecturalComplete();
</action>

<action name="setViewArchitecturalComplete">
	set(view.fovmax, get(panoview.fovmax));
	set(view.fisheyefovlink, 0.5);
	tween(view.architectural, 1.0, distance(1.0, 0.45));
	tween(view.pannini, 0.0, distance(1.0, 0.45), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	tween(view.fisheye, 0.0, distance(1.0, 0.45), easeOutQuad, 
		set(view.stereographic,false);
		tween(view.vlookat, get(panoview.v), distance(90, 0.45));
	);
	tween(view.fov, get(panoview.fov), distance(50, 0.45));
</action>

  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>


  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);set(fullscreen,false);</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);set(fullscreen,true);</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>

<action name="setViewLittlePlanet">
	set(sceneisfull360, false);
	if(scene[get(xml.scene)].full360,
		sub(viewhfov, panoview.hmax, panoview.hmin);
		if (viewhfov == 360,
			sub(viewvfov, panoview.vmax, panoview.vmin);
			if (viewvfov == 180,
				set(sceneisfull360, true);
			);
		);
	);
	if (sceneisfull360 AND (device.webgl OR device.flash),
		if(normalViewActivated,stopSetViewTweens(););
		if(current_view_isflat === true,
			setViewNonFlat(VFOV);
		);
		setViewLittlePlanetComplete();
	);
</action>

<action name="setViewLittlePlanetComplete">
	set(backtonormalfirst,false);
	if(view.pannini GE 1.0, set(backtonormalfirst,true));
	if(view.stereographic == false, set(backtonormalfirst,true));
	if(backtonormalfirst, hideTooltip();tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeOutQuad, WAIT); );
	set(view.stereographic, true);
	set(view.fisheyefovlink, 1.5);
	tween(view.architectural, 0.0, 0.25);
	tween(view.vlookat, 90, distance(179, 1.50));
	tween(view.pannini, 0.0, distance(1.0, 0.75), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	if(panoview.fovmax LE 150, set(view.fovmax, 150); , set(view.fovmax, get(panoview.fovmax)); );
	tween(view.fisheye, 1.0, distance(1.0, 0.75));
	tween(view.fov, 150, distance(179, 0.75));
</action>

  <action name="enableGyroscope">
    changeGyroscopeState(true);
  </action>
  <action name="disableGyroscope">
    changeGyroscopeState(false);
  </action>


</krpano>